package com.pax.dxxtest;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.os.SystemClock;
import android.util.Log;
import android.view.KeyEvent;
import android.widget.TextView;

import com.pax.dxxtest.R;
import com.pax.mposapi.BaseSystemManager;
import com.pax.mposapi.ClssManager;
import com.pax.mposapi.ConfigManager;
import com.pax.mposapi.EmvManager;
import com.pax.mposapi.IccManager;
import com.pax.mposapi.KeyboardManager;
import com.pax.mposapi.UIManager;
import com.pax.mposapi.comm.Comm;
import com.pax.mposapi.model.APDU_RESP;
import com.pax.mposapi.model.APDU_SEND;
import com.pax.mposapi.model.EMV_APPLIST;
import com.pax.mposapi.model.EMV_CAPK;
import com.pax.mposapi.model.EMV_PARAM;
import com.pax.mposapi.util.Utils;

public class IccActivity extends Activity {
	
	private String mInterface;
	private String mMethod;
	private String mNo;
	
	private UIManager ui;
	private KeyboardManager kbd;
	private IccManager icc;
	private TextView text;
	private ProgressDialog progressDialog;
	private ClssManager clss;
	private EmvManager emv;
	private static final String TAG = "EmvActivity";
	private static final int MSG_UPDATE_STATUS = 1;
	
	public static final int MSG_INPUT_AMOUNT = 10;
	public static final int MSG_GET_HOLDER_PWD = 11;
	public static final int MSG_VERIFY_PIN_OK = 12;
	private static final int offlinePinInputTimeout = 30000;
	
	

	private final int NORMALRESULT = 1;
	private final int EXCEPTRESULT = 2;
	private final int MAX_CAPK_NUM     = 45;  
	private EMV_CAPK gCapklist[];
	private EMV_CAPK capk01;
	private EMV_CAPK capk02;
	private EMV_CAPK capk03;
	private EMV_CAPK capk04;
	private EMV_CAPK capk05;
	private EMV_CAPK capk06;
	private EMV_CAPK capk07;
	private EMV_CAPK capk08;
	private EMV_CAPK capk09;
	private EMV_CAPK capk10;
	private EMV_CAPK capk11;
	private EMV_CAPK capk12;
	private EMV_CAPK capk13;
	private EMV_CAPK capk14;
	private EMV_CAPK capk15;
	private EMV_CAPK capk16;
	private EMV_CAPK capk17;
	private EMV_CAPK capk18;
	private EMV_CAPK capk19;
	private EMV_CAPK capk20;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_base);
        
        Intent intent = getIntent();
        mInterface = intent.getStringExtra("Interface");
        mMethod = intent.getStringExtra("Method");
        mNo = intent.getStringExtra("No");
        
        TextView tv = (TextView)findViewById(R.id.base_title);
        tv.setText(mInterface + "_" + mMethod + mNo);
        
	    ui = UIManager.getInstance(this);
	    kbd = KeyboardManager.getInstance(this);
	    icc = IccManager.getInstance(this);
	    
	    test();
    }

	Handler handler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case NORMALRESULT:
			case EXCEPTRESULT:
				Bundle bundle = msg.getData();
				String result = bundle.getString("result");
				text.setText(result);
				break;
			}
	    }

	};

	private void test() {
		text = (TextView)findViewById(R.id.textViewBase);		
		progressDialog = new ProgressDialog(IccActivity.this);
		progressDialog.setCancelable(false);
		progressDialog.setMessage("Processing");
		progressDialog.setIndeterminate(true);
		progressDialog.show();
				
		new Thread(new Runnable(){
			
			public void run(){
				Looper.prepare();				
				if(mInterface.equals("IccAutoResp"))
				{
					if(mMethod.equals("FUN"))
					{
						if(mNo.equals("1"))
						{
							TestIccAutoRespFUN1();
						}
					}
				}
				if(mInterface.equals("IccClose"))
				{
					if(mMethod.equals("FUN"))
					{
						if(mNo.equals("1"))
						{
						//	TestIccCloseFUN1();
						}
					}
				}
				if(mInterface.equals("IccDetect"))
				{
					if(mMethod.equals("FUN"))
					{
						if(mNo.equals("1"))
						{
						//	TestIccDetectFUN1();
						}
					}
				}
				if(mInterface.equals("IccInit"))
				{
					if(mMethod.equals("FUN"))
					{
						if(mNo.equals("1"))
						{
							//TestIccInitFUN1();
						}
					}
				}
				if(mInterface.equals("IccIsoCommand"))
				{
					if(mMethod.equals("FUN"))
					{
						if(mNo.equals("1"))
						{
					//		TestIccIsoCommandFUN1();
						}
					}
				}
				if(mInterface.equals("IccDetectExt"))
				{
					if(mMethod.equals("FUN"))
					{
						if(mNo.equals("1"))
						{
						//	TestIccDetectExtFUN1();
						}
					}
				}
				if(mInterface.equals("DownloadCAPK"))
				{
					if(mMethod.equals("FUN"))
					{
						if(mNo.equals("1"))
						{
							TestDownloadCAPKFUN1();
						}
					}
				}
				if(mInterface.equals("DownloadAPP"))
				{
					if(mMethod.equals("FUN"))
					{
						if(mNo.equals("1"))
						{
							TestDownloadAPPFUN1();
						}
					}
				}
				if(mInterface.equals("DownloadParam"))
				{
					if(mMethod.equals("FUN"))
					{
						if(mNo.equals("1"))
						{
						//	TestDownloadParamFUN1();
						}
					}
				}
				 

			}
		}).start();
	}

	public boolean onKeyDown(int keyCode, KeyEvent event) {

		  if (keyCode == KeyEvent.KEYCODE_BACK) {
			  finish();
		  }
		  return false;
	}	
	private void IntArray2ByteArray(int[] in, int iOffset, byte[] by, int bOffset, int len)
	{
		for(int i = 0; i < len; i++)
		{
			by[bOffset + i] = (byte) (in[iOffset + i] & 0xff);
		}
	}
	
	private void TestIccAutoRespFUN1()
	{
		String record = "";
		int step = 0;
		try{
			byte slot;
			long countDown = 20000;
			long end = System.currentTimeMillis() + countDown;
			byte[] selPpseCmd = {
					(byte)0x00, (byte)0xa4, (byte)0x04, (byte)0x00
			};
			byte[] selPpseData = {
					'1', 'P', 'A', 'Y', '.', 'S', 'Y', 'S', '.', 'D', 'D', 'F', '0', '1' 
			};
			
			for(slot = 0; slot < 8; slot++)
			{
				ui.scrCls();
				ui.scrShowText("%P1010Insert Card.");
				boolean cardInserted = false;
				while ((countDown = (end - System.currentTimeMillis())) > 0)  {
					if (cardInserted = icc.iccDetect(slot)) {
						break;
					}
					ui.scrShowText("%P1020%F0" + String.format("%02d", (int)(countDown / 1000)));
					SystemClock.sleep(300);
				}					
	
				record += "Slot " + slot + ":\n";
				record += "Card inserted ? " + cardInserted + "\n";
				step++;
				byte[] atr = icc.iccInit(slot);
				step++;
				record += "ATR: " + Utils.byte2HexStr(atr, 0, atr.length) + "\n";
				
				for(byte resp = 0; resp < 2; resp++)
				{
					icc.iccAutoResp(slot, resp);
					step++;
					APDU_SEND apduSend = new APDU_SEND();
					System.arraycopy(selPpseCmd, 0, apduSend.Command, 0, 4);
					apduSend.Lc = (short)selPpseData.length;
					System.arraycopy(selPpseData, 0, apduSend.DataIn, 0, selPpseData.length);
					apduSend.Le = (short)256;
					APDU_RESP apduResp = icc.iccIsoCommand(slot, apduSend);
					step++;
					record += "ppse sel: " + Utils.byte2HexStr(apduResp.DataOut, 0, apduResp.LenOut) + "\n";
				}
				
				icc.iccClose(slot);
				step++;
			}
			
			record += "Base test end"; 

			Bundle bundle = new Bundle();
			bundle.putString("result", record);
			Message msg = handler.obtainMessage();
			msg.what = 1;
			msg.setData(bundle);
			handler.sendMessage(msg);
		}catch(Exception exception){
			exception.printStackTrace();
			Bundle bundle = new Bundle();
			bundle.putString("result", record + "Exception: " + exception.toString() + " on step: " + step);
			Message msg = handler.obtainMessage();
			msg.what = 2;
			msg.setData(bundle);
			handler.sendMessage(msg);
		} finally {
			progressDialog.dismiss();
		}
	}
	
	
	private void InitCapk()
	{
		//以是CAPK的写入
		int tmp[];
		//init capk01
		capk01 = new EMV_CAPK();
		tmp = new int[]{0xA0, 0x00, 0x00, 0x03, 0x33};
		IntArray2ByteArray(tmp, 0, capk01.RID, 0, tmp.length);
		capk01.KeyID = 0x01;
		capk01.HashInd = 0x01;
		capk01.ArithInd = 0x01;
		capk01.ModulLen = (byte) 128;
		tmp = new int[]{0xD2, 0x84, 0x53, 0x44, 0x12, 0x32, 0x27, 0xD8, 0xD0, 0x23, 0xE8, 0x28, 0x38, 0x39, 0xED, 0x83, 0xAE, 0x5B,
	            0x01, 0x1F, 0x31, 0x63, 0x7E, 0x9B, 0x49, 0x22, 0xF8, 0xE5, 0xD9, 0x03, 0xBE, 0xCB, 0xD5, 0xA6, 0x78, 0x93,
	            0xC4, 0xBE, 0x68, 0x58, 0x25, 0x40, 0x86, 0xED, 0xF7, 0x80, 0xDB, 0x30, 0x12, 0xB8, 0x31, 0x4D, 0xF5, 0x21,
	            0xF2, 0xBD, 0xD5, 0xF9, 0xAF, 0xCC, 0x7C, 0xEC, 0xCD, 0xEC, 0x3E, 0xB7, 0x4C, 0x27, 0x3F, 0xC1, 0x66, 0x72,
	            0xED, 0x9E, 0x04, 0x76, 0x24, 0x74, 0x7F, 0xC9, 0xE9, 0xDD, 0x59, 0x33, 0xFB, 0x78, 0x4D, 0xE9, 0x4D, 0xE0,
	            0xFB, 0x18, 0x76, 0x24, 0xD0, 0xCC, 0x57, 0x93, 0x09, 0xA1, 0x65, 0x1C, 0xEA, 0x4B, 0xAD, 0x30, 0x5C, 0x5B,
	            0x83, 0xF1, 0x98, 0x1F, 0xEC, 0x34, 0x05, 0x0F, 0x0F, 0x5D, 0xBF, 0x72, 0xBF, 0x13, 0x78, 0x37, 0x6D, 0x4C,
	            0x8F, 0xD3};
		IntArray2ByteArray(tmp, 0, capk01.Modul, 0, tmp.length);
		capk01.ExpLen = 3;
		tmp = new int[]{0x01, 0x00, 0x01};
		IntArray2ByteArray(tmp, 0, capk01.Exp, 0, tmp.length);
		tmp = new int[]{0x06, 0x10, 0x31};
		IntArray2ByteArray(tmp, 0, capk01.ExpDate, 0, tmp.length);
		tmp = new int[]{0x22, 0xA1, 0xD6, 0x6F, 0x53, 0xF7, 0x6D, 0x47, 0xF9, 0x96, 0x0C, 0xF3, 0xD5, 0x96, 0xD1, 0xEC, 0x4E, 0xBF,
	            0xC2, 0x47};
		IntArray2ByteArray(tmp, 0, capk01.CheckSum, 0, tmp.length);
		
		
		//init capk02
		capk02 = new EMV_CAPK();
		tmp = new int[]{0xA0, 0x00, 0x00, 0x03, 0x33};
		IntArray2ByteArray(tmp, 0, capk02.RID, 0, tmp.length);
		capk02.KeyID = 0x08;
		capk02.HashInd = 0x01;
		capk02.ArithInd = 0x01;
		capk02.ModulLen = (byte) 144;
		tmp = new int[]{0xB6, 0x16, 0x45, 0xED, 0xFD, 0x54, 0x98, 0xFB, 0x24, 0x64, 0x44, 0x03, 0x7A, 0x0F, 0xA1, 0x8C, 0x0F, 0x10,
	            0x1E, 0xBD, 0x8E, 0xFA, 0x54, 0x57, 0x3C, 0xE6, 0xE6, 0xA7, 0xFB, 0xF6, 0x3E, 0xD2, 0x1D, 0x66, 0x34, 0x08,
	            0x52, 0xB0, 0x21, 0x1C, 0xF5, 0xEE, 0xF6, 0xA1, 0xCD, 0x98, 0x9F, 0x66, 0xAF, 0x21, 0xA8, 0xEB, 0x19, 0xDB,
	            0xD8, 0xDB, 0xC3, 0x70, 0x6D, 0x13, 0x53, 0x63, 0xA0, 0xD6, 0x83, 0xD0, 0x46, 0x30, 0x4F, 0x5A, 0x83, 0x6B,
	            0xC1, 0xBC, 0x63, 0x28, 0x21, 0xAF, 0xE7, 0xA2, 0xF7, 0x5D, 0xA3, 0xC5, 0x0A, 0xC7, 0x4C, 0x54, 0x5A, 0x75,
	            0x45, 0x62, 0x20, 0x41, 0x37, 0x16, 0x96, 0x63, 0xCF, 0xCC, 0x0B, 0x06, 0xE6, 0x7E, 0x21, 0x09, 0xEB, 0xA4,
	            0x1B, 0xC6, 0x7F, 0xF2, 0x0C, 0xC8, 0xAC, 0x80, 0xD7, 0xB6, 0xEE, 0x1A, 0x95, 0x46, 0x5B, 0x3B, 0x26, 0x57,
	            0x53, 0x3E, 0xA5, 0x6D, 0x92, 0xD5, 0x39, 0xE5, 0x06, 0x43, 0x60, 0xEA, 0x48, 0x50, 0xFE, 0xD2, 0xD1, 0xBF};
		IntArray2ByteArray(tmp, 0, capk02.Modul, 0, tmp.length);
		capk02.ExpLen = 1;
		tmp = new int[]{0x03};
		IntArray2ByteArray(tmp, 0, capk02.Exp, 0, tmp.length);
		tmp = new int[]{0x30, 0x12, 0x30};
		IntArray2ByteArray(tmp, 0, capk02.ExpDate, 0, tmp.length);
		tmp = new int[]{0xEE, 0x23, 0xB6, 0x16, 0xC9, 0x5C, 0x02, 0x65, 0x2A, 0xD1, 0x88, 0x60, 0xE4, 0x87, 0x87, 0xC0, 0x79, 0xE8,
	            0xE8, 0x5A};
		IntArray2ByteArray(tmp, 0, capk02.CheckSum, 0, tmp.length);
		
		
		//init capk03
		capk03 = new EMV_CAPK();
		tmp = new int[]{0xA0, 0x00, 0x00, 0x03, 0x33};
		IntArray2ByteArray(tmp, 0, capk03.RID, 0, tmp.length);
		capk03.KeyID = 0x09;
		capk03.HashInd = 0x01;
		capk03.ArithInd = 0x01;
		capk03.ModulLen = (byte) 176;
		tmp = new int[]{ 0xEB, 0x37, 0x4D, 0xFC, 0x5A, 0x96, 0xB7, 0x1D, 0x28, 0x63, 0x87, 0x5E, 0xDA, 0x2E, 0xAF, 0xB9,
	            0x6B, 0x1B, 0x43, 0x9D, 0x3E, 0xCE, 0x0B, 0x18, 0x26, 0xA2, 0x67, 0x2E, 0xEE, 0xFA, 0x79, 0x90,
	            0x28, 0x67, 0x76, 0xF8, 0xBD, 0x98, 0x9A, 0x15, 0x14, 0x1A, 0x75, 0xC3, 0x84, 0xDF, 0xC1, 0x4F,
	            0xEF, 0x92, 0x43, 0xAA, 0xB3, 0x27, 0x07, 0x65, 0x9B, 0xE9, 0xE4, 0x79, 0x7A, 0x24, 0x7C, 0x2F,
	            0x0B, 0x6D, 0x99, 0x37, 0x2F, 0x38, 0x4A, 0xF6, 0x2F, 0xE2, 0x3B, 0xC5, 0x4B, 0xCD, 0xC5, 0x7A,
	            0x9A, 0xCD, 0x1D, 0x55, 0x85, 0xC3, 0x03, 0xF2, 0x01, 0xEF, 0x4E, 0x8B, 0x80, 0x6A, 0xFB, 0x80,
	            0x9D, 0xB1, 0xA3, 0xDB, 0x1C, 0xD1, 0x12, 0xAC, 0x88, 0x4F, 0x16, 0x4A, 0x67, 0xB9, 0x9C, 0x7D,
	            0x6E, 0x5A, 0x8A, 0x6D, 0xF1, 0xD3, 0xCA, 0xE6, 0xD7, 0xED, 0x3D, 0x5B, 0xE7, 0x25, 0xB2, 0xDE,
	            0x4A, 0xDE, 0x23, 0xFA, 0x67, 0x9B, 0xF4, 0xEB, 0x15, 0xA9, 0x3D, 0x8A, 0x6E, 0x29, 0xC7, 0xFF,
	            0xA1, 0xA7, 0x0D, 0xE2, 0xE5, 0x4F, 0x59, 0x3D, 0x90, 0x8A, 0x3B, 0xF9, 0xEB, 0xBD, 0x76, 0x0B,
	            0xBF, 0xDC, 0x8D, 0xB8, 0xB5, 0x44, 0x97, 0xE6, 0xC5, 0xBE, 0x0E, 0x4A, 0x4D, 0xAC, 0x29, 0xE5};
		IntArray2ByteArray(tmp, 0, capk03.Modul, 0, tmp.length);
		capk03.ExpLen = 1;
		tmp = new int[]{0x03};
		IntArray2ByteArray(tmp, 0, capk03.Exp, 0, tmp.length);
		tmp = new int[]{0x30, 0x12, 0x30};
		IntArray2ByteArray(tmp, 0, capk03.ExpDate, 0, tmp.length);
		tmp = new int[]{0xA0, 0x75, 0x30, 0x6E, 0xAB, 0x00, 0x45, 0xBA, 0xF7, 0x2C, 0xDD, 0x33, 0xB3, 0xB6, 0x78, 0x77, 0x9D, 0xE1,
				0xF5, 0x27};
		IntArray2ByteArray(tmp, 0, capk03.CheckSum, 0, tmp.length);
	
		//init capk04
		capk04 = new EMV_CAPK();
		tmp = new int[]{0xA0, 0x00, 0x00, 0x03, 0x33};
		IntArray2ByteArray(tmp, 0, capk04.RID, 0, tmp.length);
		capk04.KeyID = 0x0b;
		capk04.HashInd = 0x01;
		capk04.ArithInd = 0x01;
		capk04.ModulLen = (byte) 248;
		tmp = new int[]{ 0xCF, 0x9F, 0xDF, 0x46, 0xB3, 0x56, 0x37, 0x8E, 0x9A, 0xF3, 0x11, 0xB0, 0xF9, 0x81, 0xB2, 0x1A,
	            0x1F, 0x22, 0xF2, 0x50, 0xFB, 0x11, 0xF5, 0x5C, 0x95, 0x87, 0x09, 0xE3, 0xC7, 0x24, 0x19, 0x18,
	            0x29, 0x34, 0x83, 0x28, 0x9E, 0xAE, 0x68, 0x8A, 0x09, 0x4C, 0x02, 0xC3, 0x44, 0xE2, 0x99, 0x9F,
	            0x31, 0x5A, 0x72, 0x84, 0x1F, 0x48, 0x9E, 0x24, 0xB1, 0xBA, 0x00, 0x56, 0xCF, 0xAB, 0x3B, 0x47,
	            0x9D, 0x0E, 0x82, 0x64, 0x52, 0x37, 0x5D, 0xCD, 0xBB, 0x67, 0xE9, 0x7E, 0xC2, 0xAA, 0x66, 0xF4,
	            0x60, 0x1D, 0x77, 0x4F, 0xEA, 0xEF, 0x77, 0x5A, 0xCC, 0xC6, 0x21, 0xBF, 0xEB, 0x65, 0xFB, 0x00,
	            0x53, 0xFC, 0x5F, 0x39, 0x2A, 0xA5, 0xE1, 0xD4, 0xC4, 0x1A, 0x4D, 0xE9, 0xFF, 0xDF, 0xDF, 0x13,
	            0x27, 0xC4, 0xBB, 0x87, 0x4F, 0x1F, 0x63, 0xA5, 0x99, 0xEE, 0x39, 0x02, 0xFE, 0x95, 0xE7, 0x29,
	            0xFD, 0x78, 0xD4, 0x23, 0x4D, 0xC7, 0xE6, 0xCF, 0x1A, 0xBA, 0xBA, 0xA3, 0xF6, 0xDB, 0x29, 0xB7,
	            0xF0, 0x5D, 0x1D, 0x90, 0x1D, 0x2E, 0x76, 0xA6, 0x06, 0xA8, 0xCB, 0xFF, 0xFF, 0xEC, 0xBD, 0x91,
	            0x8F, 0xA2, 0xD2, 0x78, 0xBD, 0xB4, 0x3B, 0x04, 0x34, 0xF5, 0xD4, 0x51, 0x34, 0xBE, 0x1C, 0x27,
	            0x81, 0xD1, 0x57, 0xD5, 0x01, 0xFF, 0x43, 0xE5, 0xF1, 0xC4, 0x70, 0x96, 0x7C, 0xD5, 0x7C, 0xE5,
	            0x3B, 0x64, 0xD8, 0x29, 0x74, 0xC8, 0x27, 0x59, 0x37, 0xC5, 0xD8, 0x50, 0x2A, 0x12, 0x52, 0xA8,
	            0xA5, 0xD6, 0x08, 0x8A, 0x25, 0x9B, 0x69, 0x4F, 0x98, 0x64, 0x8D, 0x9A, 0xF2, 0xCB, 0x0E, 0xFD,
	            0x9D, 0x94, 0x3C, 0x69, 0xF8, 0x96, 0xD4, 0x9F, 0xA3, 0x97, 0x02, 0x16, 0x2A, 0xCB, 0x5A, 0xF2,
	            0x9B, 0x90, 0xBA, 0xDE, 0x00, 0x5B, 0xC1, 0x57};
		IntArray2ByteArray(tmp, 0, capk04.Modul, 0, tmp.length);
		capk04.ExpLen = 1;
		tmp = new int[]{0x03};
		IntArray2ByteArray(tmp, 0, capk04.Exp, 0, tmp.length);
		tmp = new int[]{0x30, 0x12, 0x30};
		IntArray2ByteArray(tmp, 0, capk04.ExpDate, 0, tmp.length);
		tmp = new int[]{0xBD, 0x33, 0x1F, 0x99, 0x96, 0xA4, 0x90, 0xB3, 0x3C, 0x13, 0x44, 0x10, 0x66, 0xA0, 0x9A, 0xD3, 0xFE, 0xB5,
	            0xF6, 0x6C};
		IntArray2ByteArray(tmp, 0, capk04.CheckSum, 0, tmp.length);
	
		
		//init capk05
		capk05 = new EMV_CAPK();
		tmp = new int[]{0xA0, 0x00, 0x00, 0x03, 0x33};
		IntArray2ByteArray(tmp, 0, capk05.RID, 0, tmp.length);
		capk05.KeyID = 0x0a;
		capk05.HashInd = 0x01;
		capk05.ArithInd = 0x01;
		capk05.ModulLen = (byte) 128;
		tmp = new int[]{0xB2, 0xAB, 0x1B, 0x6E, 0x9A, 0xC5, 0x5A, 0x75, 0xAD, 0xFD, 0x5B, 0xBC, 0x34, 0x49, 0x0E, 0x53,
	            0xC4, 0xC3, 0x38, 0x1F, 0x34, 0xE6, 0x0E, 0x7F, 0xAC, 0x21, 0xCC, 0x2B, 0x26, 0xDD, 0x34, 0x46,
	            0x2B, 0x64, 0xA6, 0xFA, 0xE2, 0x49, 0x5E, 0xD1, 0xDD, 0x38, 0x3B, 0x81, 0x38, 0xBE, 0xA1, 0x00,
	            0xFF, 0x9B, 0x7A, 0x11, 0x18, 0x17, 0xE7, 0xB9, 0x86, 0x9A, 0x97, 0x42, 0xB1, 0x9E, 0x5C, 0x9D,
	            0xAC, 0x56, 0xF8, 0xB8, 0x82, 0x7F, 0x11, 0xB0, 0x5A, 0x08, 0xEC, 0xCF, 0x9E, 0x8D, 0x5E, 0x85,
	            0xB0, 0xF7, 0xCF, 0xA6, 0x44, 0xEF, 0xF3, 0xE9, 0xB7, 0x96, 0x68, 0x8F, 0x38, 0xE0, 0x06, 0xDE,
	            0xB2, 0x1E, 0x10, 0x1C, 0x01, 0x02, 0x89, 0x03, 0xA0, 0x60, 0x23, 0xAC, 0x5A, 0xAB, 0x86, 0x35,
	            0xF8, 0xE3, 0x07, 0xA5, 0x3A, 0xC7, 0x42, 0xBD, 0xCE, 0x6A, 0x28, 0x3F, 0x58, 0x5F, 0x48, 0xEF};
		IntArray2ByteArray(tmp, 0, capk05.Modul, 0, tmp.length);
		capk05.ExpLen = 1;
		tmp = new int[]{0x03};
		IntArray2ByteArray(tmp, 0, capk05.Exp, 0, tmp.length);
		tmp = new int[]{0x30, 0x12, 0x30};
		IntArray2ByteArray(tmp, 0, capk05.ExpDate, 0, tmp.length);
		tmp = new int[]{0xC8, 0x8B, 0xE6, 0xB2, 0x41, 0x7C, 0x4F, 0x94, 0x1C, 0x93, 0x71, 0xEA, 0x35, 0xA3, 0x77, 0x15, 0x87, 0x67,
	            0xE4, 0xE3};
		IntArray2ByteArray(tmp, 0, capk05.CheckSum, 0, tmp.length);
		
		
		//init capk06  CUP 1024 bits Test Key 02
		capk06 = new EMV_CAPK();
		tmp = new int[]{0xD1,0x56,0x00,0x00,0x01};
		IntArray2ByteArray(tmp, 0, capk06.RID, 0, tmp.length);
		capk06.KeyID = 0x03;
		capk06.HashInd = 0x01;
		capk06.ArithInd = 0x01;
		capk06.ModulLen = (byte) 128;
		tmp = new int[]{0xE2,0x3B,0xB3,0xC8,0xE5,0x65,0x9F,0x19,0xFC,0x7B,0xC4,0xDC,0x7A,0xAE,0xD1,0x86,
                0xD7,0xC0,0x6B,0xA2,0x66,0x20,0x6C,0x45,0xA8,0x7C,0x63,0xCA,0x8E,0xEE,0x8D,0x27,
                0x3F,0x70,0x35,0xE3,0x3F,0x94,0x8A,0xD1,0x00,0xA5,0x1A,0xD0,0x5B,0x71,0x43,0x41,
                0xBB,0x31,0x14,0x81,0x28,0x2A,0x0C,0x6A,0x6D,0x4A,0x09,0xF1,0x54,0xB9,0xE6,0x08,
                0x80,0x7F,0x1F,0xAE,0x15,0xD7,0x8D,0x68,0x1F,0xA8,0xB1,0xA3,0x8F,0xB7,0xF6,0x9C,
                0xB5,0x62,0x17,0x12,0xC6,0xBA,0x49,0xD0,0xE0,0x81,0x0D,0xE9,0x47,0xB8,0xCC,0x03,
                0x64,0x31,0x6F,0x5B,0xBA,0x2D,0x3A,0x30,0x4F,0xB9,0x7A,0x9F,0x9C,0xB1,0xC2,0x64,
                0x46,0x7C,0xE3,0x6A,0x84,0xC0,0x1D,0x4E,0x42,0x73,0xC8,0x93,0xE5,0xC7,0xF8,0x4B};
		IntArray2ByteArray(tmp, 0, capk06.Modul, 0, tmp.length);
		capk06.ExpLen = 3;
		tmp = new int[]{0x01,0x00,0x01};
		IntArray2ByteArray(tmp, 0, capk06.Exp, 0, tmp.length);
		tmp = new int[]{0x05,0x10,0x31};
		IntArray2ByteArray(tmp, 0, capk06.ExpDate, 0, tmp.length);
		tmp = new int[]{0x76,0x16,0xE9,0xAC,0x8B,0xE0,0x14,0xAF,0x88,0xCA,0x11,0xA8,0xFB,0x17,0x96,0x7B,
                0x73,0x94,0x03,0x0E};
		IntArray2ByteArray(tmp, 0, capk06.CheckSum, 0, tmp.length);
		
		
		//init capk07   CUP 1024 bits Test Key 03
		capk07 = new EMV_CAPK();
		tmp = new int[]{0xD1,0x56,0x00,0x00,0x01};
		IntArray2ByteArray(tmp, 0, capk07.RID, 0, tmp.length);
		capk07.KeyID = 0x06;
		capk07.HashInd = 0x01;
		capk07.ArithInd = 0x01;
		capk07.ModulLen = (byte) 128;
		tmp = new int[]{0xD2,0xC4,0xD6,0x3B,0x23,0xB8,0xAB,0x4E,0xFF,0xBF,0x02,0xF0,0x04,0x8A,0x9E,0x87,
                0x68,0x95,0x30,0x2C,0xDF,0xEF,0x38,0xFF,0x89,0xD3,0x63,0x3C,0x68,0x52,0x56,0xA0,
                0x6F,0x3B,0x84,0xF6,0x67,0x0A,0x1F,0x6D,0x36,0x3F,0x83,0xE1,0x07,0x09,0xD7,0xC3,
                0x49,0x1A,0xED,0x1B,0x87,0xFF,0x66,0x3B,0x3D,0x5A,0xCE,0xA0,0x3A,0xF5,0xFA,0x4D,
                0x41,0x5C,0xCA,0x6B,0x79,0x37,0x62,0x2B,0x5F,0x51,0xAC,0x1A,0x8C,0x9C,0x77,0x0A,
                0xB7,0xF4,0xC4,0x34,0xCE,0xB6,0x27,0x63,0xD4,0x09,0xAE,0xB8,0x0F,0xCF,0x83,0xEA,
                0x74,0xD9,0x70,0x15,0x64,0x7C,0x4F,0x36,0x15,0x58,0x96,0x75,0xE8,0x30,0x0A,0xEA,
                0x21,0x83,0xD6,0x9F,0x52,0x8F,0x46,0x89,0x9B,0x41,0x09,0x92,0xF1,0xC6,0x89,0x53};
		IntArray2ByteArray(tmp, 0, capk07.Modul, 0, tmp.length);
		capk07.ExpLen = 3;
		tmp = new int[]{0x01,0x00,0x01};
		IntArray2ByteArray(tmp, 0, capk07.Exp, 0, tmp.length);
		tmp = new int[]{0x05,0x10,0x31};
		IntArray2ByteArray(tmp, 0, capk07.ExpDate, 0, tmp.length);
		tmp = new int[]{0x76,0x16,0xE9,0xAC,0x8B,0xE0,0x14,0xAF,0x88,0xCA,0x11,0xA8,0xFB,0x17,0x96,0x7B,
                0x73,0x94,0x03,0x0E};
		IntArray2ByteArray(tmp, 0, capk07.CheckSum, 0, tmp.length);
		
		
		//init capk08   CUP 1024 bits Test Key 04
		capk08 = new EMV_CAPK();
		tmp = new int[]{0xD1,0x56,0x00,0x00,0x01};
		IntArray2ByteArray(tmp, 0, capk08.RID, 0, tmp.length);
		capk08.KeyID = 0x09;
		capk08.HashInd = 0x01;
		capk08.ArithInd = 0x01;
		capk08.ModulLen = (byte) 128;
		tmp = new int[]{0xA9,0xAE,0xCE,0xB5,0x29,0xA7,0x14,0xC1,0x4A,0xCC,0xEC,0xCB,0xE5,0x32,0x8A,0x8A,
                0x0C,0x6D,0x4E,0xCF,0x49,0x0D,0xC5,0x0C,0xA3,0xE4,0xA2,0x1D,0xC6,0xE4,0x21,0x06,
                0xC9,0x3A,0x0C,0x7B,0x6D,0xD5,0x59,0xAE,0xD9,0x8B,0x67,0x2E,0x38,0x22,0xB0,0x43,
                0x76,0x8E,0xB4,0xFD,0x7E,0xAD,0x0D,0xAD,0x39,0xCE,0x0B,0x56,0x30,0x44,0xE3,0x14,
                0x03,0xA0,0x93,0x46,0x1E,0x4F,0x59,0xEA,0x69,0x54,0xC9,0x10,0xB5,0x73,0xE7,0xA3,
                0xBF,0x58,0x41,0x47,0xD1,0x2F,0xE3,0x39,0xCE,0x73,0x98,0x0B,0x23,0x7D,0xA1,0xA3,
                0x13,0x1E,0xDA,0x01,0xA2,0xD8,0x8A,0xAD,0x17,0xB4,0x99,0x70,0x49,0x07,0x23,0xA9,
                0x2F,0x54,0xBA,0x30,0x68,0x5C,0x13,0xFF,0x90,0xBB,0xD5,0xBA,0xE2,0x82,0x61,0x13};
		IntArray2ByteArray(tmp, 0, capk08.Modul, 0, tmp.length);
		capk08.ExpLen = 3;
		tmp = new int[]{0x01,0x00,0x01};
		IntArray2ByteArray(tmp, 0, capk08.Exp, 0, tmp.length);
		tmp = new int[]{0x05,0x10,0x31};
		IntArray2ByteArray(tmp, 0, capk08.ExpDate, 0, tmp.length);
		tmp = new int[]{0x76,0x16,0xE9,0xAC,0x8B,0xE0,0x14,0xAF,0x88,0xCA,0x11,0xA8,0xFB,0x17,0x96,0x7B,
                0x73,0x94,0x03,0x0E};
		IntArray2ByteArray(tmp, 0, capk08.CheckSum, 0, tmp.length);
		
		
		//init capk09   CUP 1024 bits Test Key 05
		capk09 = new EMV_CAPK();
		tmp = new int[]{0xD1,0x56,0x00,0x00,0x01};
		IntArray2ByteArray(tmp, 0, capk09.RID, 0, tmp.length);
		capk09.KeyID = 0x0c;
		capk09.HashInd = 0x01;
		capk09.ArithInd = 0x01;
		capk09.ModulLen = (byte) 128;
		tmp = new int[]{0xA8,0xB5,0x61,0xE3,0x70,0xA2,0xBC,0x23,0x0A,0xEC,0x62,0x46,0xEC,0x5D,0xC3,0x3F,
                0x65,0x06,0xC1,0x42,0x12,0xAB,0x6D,0x14,0x6A,0xA0,0xB1,0x8B,0xE8,0x6A,0xDE,0x35,
                0x32,0x7E,0x2C,0x5D,0x2C,0x34,0xEB,0x61,0x2E,0x6F,0x17,0x09,0xB6,0xAA,0xB3,0x11,
                0x9E,0x95,0x67,0xAB,0x47,0xF2,0x4A,0x8A,0xC1,0x0D,0x85,0xE2,0xC8,0xC7,0x9B,0x97,
                0x1D,0x34,0x8D,0x18,0x46,0x30,0x5D,0xA2,0x89,0xB2,0x4A,0x47,0x84,0xD0,0x44,0xC2,
                0x25,0x33,0x53,0x9A,0x2A,0xA2,0x8D,0x4D,0x55,0x8C,0x0A,0xAD,0xDB,0x70,0x4A,0x8D,
                0x22,0xA2,0x49,0x2A,0xB7,0x43,0xED,0x0F,0x1D,0x5D,0x4D,0x51,0xD7,0x12,0xAF,0xA1,
                0x04,0xBC,0x48,0x66,0x74,0xFC,0x31,0xB3,0x32,0xAD,0xE7,0x80,0xFD,0xAA,0x96,0xDD};
		IntArray2ByteArray(tmp, 0, capk09.Modul, 0, tmp.length);
		capk09.ExpLen = 3;
		tmp = new int[]{0x01,0x00,0x01};
		IntArray2ByteArray(tmp, 0, capk09.Exp, 0, tmp.length);
		tmp = new int[]{0x05,0x10,0x31};
		IntArray2ByteArray(tmp, 0, capk09.ExpDate, 0, tmp.length);
		tmp = new int[]{0x76,0x16,0xE9,0xAC,0x8B,0xE0,0x14,0xAF,0x88,0xCA,0x11,0xA8,0xFB,0x17,0x96,0x7B,
                0x73,0x94,0x03,0x0E};
		IntArray2ByteArray(tmp, 0, capk09.CheckSum, 0, tmp.length);
		
		
		//init capk10   CUP 1024 bits Test Key 06
		capk10 = new EMV_CAPK();
		tmp = new int[]{0xD1,0x56,0x00,0x00,0x01};
		IntArray2ByteArray(tmp, 0, capk10.RID, 0, tmp.length);
		capk10.KeyID = 0x0f;
		capk10.HashInd = 0x01;
		capk10.ArithInd = 0x01;
		capk10.ModulLen = (byte) 128;
		tmp = new int[]{0xBA,0x92,0x51,0xFE,0x0D,0x6F,0x26,0xFF,0x17,0x67,0x67,0x95,0x0B,0xD9,0x1B,0xAC,
                0xE9,0x09,0xC9,0x7E,0xB7,0x22,0xD5,0xE2,0x8D,0x30,0xC1,0xD5,0x3D,0x5F,0x77,0xB5,
                0xA0,0xEC,0x30,0x48,0x88,0x0D,0xEE,0x3B,0xDD,0x99,0x8C,0x3A,0xE8,0x6C,0x98,0x8E,
                0x64,0x0F,0x56,0x28,0x5D,0x42,0xC5,0x30,0x88,0xAD,0x89,0x60,0x9D,0xB5,0x3C,0x30,
                0x4D,0x72,0x46,0xDE,0xD8,0xB2,0xA4,0x88,0x69,0x14,0xA8,0x08,0x70,0xB6,0x32,0xDA,
                0x18,0x06,0x65,0xB1,0xB3,0xDF,0x6B,0x28,0x87,0xD1,0x69,0x4F,0xC3,0xDC,0x73,0x2F,
                0x9B,0xE4,0x71,0xB6,0x2E,0xFF,0xA5,0x21,0x03,0x51,0xF9,0x8B,0x69,0xE1,0xD9,0xFE,
                0x1D,0x1A,0x37,0x66,0x59,0x95,0xB8,0x5C,0x68,0x8C,0xB8,0xD9,0x3E,0x25,0xDB,0xEB};
		IntArray2ByteArray(tmp, 0, capk10.Modul, 0, tmp.length);
		capk10.ExpLen = 3;
		tmp = new int[]{0x01,0x00,0x01};
		IntArray2ByteArray(tmp, 0, capk10.Exp, 0, tmp.length);
		tmp = new int[]{0x05,0x10,0x31};
		IntArray2ByteArray(tmp, 0, capk10.ExpDate, 0, tmp.length);
		tmp = new int[]{0x76,0x16,0xE9,0xAC,0x8B,0xE0,0x14,0xAF,0x88,0xCA,0x11,0xA8,0xFB,0x17,0x96,0x7B,
                0x73,0x94,0x03,0x0E};
		IntArray2ByteArray(tmp, 0, capk10.CheckSum, 0, tmp.length);
		
		
		//init capk11   CUP 1024 bits Test Key 07
		capk11 = new EMV_CAPK();
		tmp = new int[]{0xD1,0x56,0x00,0x00,0x01};
		IntArray2ByteArray(tmp, 0, capk11.RID, 0, tmp.length);
		capk11.KeyID = 0x12;
		capk11.HashInd = 0x01;
		capk11.ArithInd = 0x01;
		capk11.ModulLen = (byte) 128;
		tmp = new int[]{0xBE,0xD3,0x8F,0xA6,0x4C,0x65,0xCA,0x65,0xDE,0xC8,0xEF,0x44,0x18,0xC2,0xF2,0x38,
                0xFD,0x2A,0x8B,0xE0,0x31,0xFA,0x57,0x1F,0x47,0xA4,0xD4,0x6D,0x62,0x5B,0xC0,0x1F,
                0x6D,0x08,0x35,0x62,0xC1,0xDC,0xC2,0xA0,0xDD,0x0C,0xDA,0xA0,0x72,0x3A,0xA8,0xEA,
                0x75,0xDD,0x65,0x2B,0xE1,0x75,0xEF,0x37,0x35,0xBF,0x0E,0x84,0xAA,0x17,0x75,0xC7,
                0x92,0xBC,0xCD,0x51,0x08,0x84,0x2F,0x1C,0x26,0xDB,0xEB,0x56,0x8E,0x96,0xFA,0xDF,
                0x04,0xD2,0x96,0xC5,0x34,0x47,0xBD,0x06,0xAA,0x9F,0x58,0xC9,0x11,0x98,0x56,0x99,
                0x6F,0x63,0x25,0x51,0xA7,0xA8,0x4E,0xBF,0x5E,0x8D,0x51,0x0E,0xB2,0x8B,0x5A,0xA0,
                0xEC,0x65,0x53,0xF4,0x38,0x82,0x05,0x17,0x13,0xE7,0xC1,0xBD,0x81,0x97,0xFC,0x57};
		IntArray2ByteArray(tmp, 0, capk11.Modul, 0, tmp.length);
		capk11.ExpLen = 3;
		tmp = new int[]{0x01,0x00,0x01};
		IntArray2ByteArray(tmp, 0, capk11.Exp, 0, tmp.length);
		tmp = new int[]{0x05,0x10,0x31};
		IntArray2ByteArray(tmp, 0, capk11.ExpDate, 0, tmp.length);
		tmp = new int[]{0x76,0x16,0xE9,0xAC,0x8B,0xE0,0x14,0xAF,0x88,0xCA,0x11,0xA8,0xFB,0x17,0x96,0x7B,
                0x73,0x94,0x03,0x0E};
		IntArray2ByteArray(tmp, 0, capk11.CheckSum, 0, tmp.length);
		
		
		//init capk12   CUP 1024 bits Test Key 08
		capk12 = new EMV_CAPK();
		tmp = new int[]{0xD1,0x56,0x00,0x00,0x01};
		IntArray2ByteArray(tmp, 0, capk12.RID, 0, tmp.length);
		capk12.KeyID = 0x15;
		capk12.HashInd = 0x01;
		capk12.ArithInd = 0x01;
		capk12.ModulLen = (byte) 128;
		tmp = new int[]{0xBF,0xEC,0xCA,0x54,0xD7,0xF1,0xC7,0xC3,0xA2,0x6D,0x70,0x4A,0x77,0xBC,0x83,0xB0,
                0xB3,0x78,0xF5,0x2C,0xCC,0x85,0xB9,0x6A,0x06,0x26,0x13,0xEC,0xF2,0x43,0x16,0x7D,
                0x3D,0x29,0xBD,0xAA,0x2B,0x59,0x76,0x4C,0x3D,0x09,0x23,0x2B,0xF2,0x3E,0xBF,0xA4,
                0x7E,0x33,0x06,0x59,0xA3,0xAE,0xBF,0xE0,0xA5,0xC7,0x32,0x94,0xD6,0x18,0x37,0xA0,
                0x03,0xFA,0xE7,0xF7,0xF6,0x03,0x85,0xCA,0xDE,0xA1,0x09,0x0D,0x9D,0xCF,0x5D,0xDF,
                0x2F,0x4A,0xE0,0xE1,0x2C,0xA9,0x14,0x5C,0x0D,0xD2,0x70,0x27,0x16,0xA9,0x74,0x13,
                0xFF,0xF6,0xF1,0x19,0xDF,0x8D,0xC7,0x5E,0x29,0x38,0x1F,0x47,0x3A,0x42,0x69,0x1F,
                0xAF,0x11,0xE8,0xD8,0x86,0x05,0xD9,0xD4,0x4D,0xC0,0x7F,0x11,0x40,0x15,0x81,0xF7};
		IntArray2ByteArray(tmp, 0, capk12.Modul, 0, tmp.length);
		capk12.ExpLen = 3;
		tmp = new int[]{0x01,0x00,0x01};
		IntArray2ByteArray(tmp, 0, capk12.Exp, 0, tmp.length);
		tmp = new int[]{0x05,0x10,0x31};
		IntArray2ByteArray(tmp, 0, capk12.ExpDate, 0, tmp.length);
		tmp = new int[]{0x76,0x16,0xE9,0xAC,0x8B,0xE0,0x14,0xAF,0x88,0xCA,0x11,0xA8,0xFB,0x17,0x96,0x7B,
                0x73,0x94,0x03,0x0E};
		IntArray2ByteArray(tmp, 0, capk12.CheckSum, 0, tmp.length);
		
		
		//init capk13   CUP 1024 bits Test Key 09
		capk13 = new EMV_CAPK();
		tmp = new int[]{0xD1,0x56,0x00,0x00,0x01};
		IntArray2ByteArray(tmp, 0, capk13.RID, 0, tmp.length);
		capk13.KeyID = 0x15;
		capk13.HashInd = 0x01;
		capk13.ArithInd = 0x01;
		capk13.ModulLen = (byte) 128;
		tmp = new int[]{0xBF,0xEC,0xCA,0x54,0xD7,0xF1,0xC7,0xC3,0xA2,0x6D,0x70,0x4A,0x77,0xBC,0x83,0xB0,
                0xB3,0x78,0xF5,0x2C,0xCC,0x85,0xB9,0x6A,0x06,0x26,0x13,0xEC,0xF2,0x43,0x16,0x7D,
                0x3D,0x29,0xBD,0xAA,0x2B,0x59,0x76,0x4C,0x3D,0x09,0x23,0x2B,0xF2,0x3E,0xBF,0xA4,
                0x7E,0x33,0x06,0x59,0xA3,0xAE,0xBF,0xE0,0xA5,0xC7,0x32,0x94,0xD6,0x18,0x37,0xA0,
                0x03,0xFA,0xE7,0xF7,0xF6,0x03,0x85,0xCA,0xDE,0xA1,0x09,0x0D,0x9D,0xCF,0x5D,0xDF,
                0x2F,0x4A,0xE0,0xE1,0x2C,0xA9,0x14,0x5C,0x0D,0xD2,0x70,0x27,0x16,0xA9,0x74,0x13,
                0xFF,0xF6,0xF1,0x19,0xDF,0x8D,0xC7,0x5E,0x29,0x38,0x1F,0x47,0x3A,0x42,0x69,0x1F,
                0xAF,0x11,0xE8,0xD8,0x86,0x05,0xD9,0xD4,0x4D,0xC0,0x7F,0x11,0x40,0x15,0x81,0xF7};
		IntArray2ByteArray(tmp, 0, capk13.Modul, 0, tmp.length);
		capk13.ExpLen = 3;
		tmp = new int[]{0x01,0x00,0x01};
		IntArray2ByteArray(tmp, 0, capk13.Exp, 0, tmp.length);
		tmp = new int[]{0x05,0x10,0x31};
		IntArray2ByteArray(tmp, 0, capk13.ExpDate, 0, tmp.length);
		tmp = new int[]{0x76,0x16,0xE9,0xAC,0x8B,0xE0,0x14,0xAF,0x88,0xCA,0x11,0xA8,0xFB,0x17,0x96,0x7B,
                0x73,0x94,0x03,0x0E};
		IntArray2ByteArray(tmp, 0, capk13.CheckSum, 0, tmp.length);
		
		
		//init capk14   CUP 1024 bits Test Key 10
		capk14 = new EMV_CAPK();
		tmp = new int[]{0xD1,0x56,0x00,0x00,0x01};
		IntArray2ByteArray(tmp, 0, capk14.RID, 0, tmp.length);
		capk14.KeyID = 0x1b;
		capk14.HashInd = 0x01;
		capk14.ArithInd = 0x01;
		capk14.ModulLen = (byte) 128;
		tmp = new int[]{0xCB,0xFD,0xA4,0x4E,0x39,0x20,0xF6,0x95,0xC8,0x96,0x66,0x51,0xC1,0x75,0x94,0xBA,
                0xBB,0x36,0x23,0xCB,0xE1,0x47,0x8D,0xFC,0xFF,0xA5,0x8E,0x94,0xA7,0xB5,0xBE,0xB3,
                0x49,0xB3,0x4E,0x0B,0xF1,0x75,0x7F,0xA1,0xA9,0xB4,0x6C,0xC3,0x9C,0xA9,0x7B,0xE5,
                0x04,0xCD,0x4E,0x21,0xE3,0x21,0x62,0x36,0xD6,0x23,0x00,0x17,0xC4,0x98,0x93,0x42,
                0x4E,0x25,0x5F,0xD6,0x53,0xC5,0x02,0x27,0x20,0xAF,0x7F,0x56,0xF5,0x4F,0x5D,0x40,
                0xCC,0xB1,0x24,0xF1,0xD7,0x78,0xD7,0x22,0xAB,0xCD,0xEF,0x57,0x3B,0xC5,0x8F,0x75,
                0xEC,0x4F,0xE7,0x60,0x64,0xC5,0x9F,0x99,0xAB,0x7F,0x07,0x91,0x79,0x61,0x36,0xA9,
                0xF3,0x4C,0x02,0x8E,0xC5,0x08,0xD5,0x95,0x2E,0x1F,0xDD,0x5A,0x9F,0xC6,0x2A,0xED};
		IntArray2ByteArray(tmp, 0, capk14.Modul, 0, tmp.length);
		capk14.ExpLen = 3;
		tmp = new int[]{0x01,0x00,0x01};
		IntArray2ByteArray(tmp, 0, capk14.Exp, 0, tmp.length);
		tmp = new int[]{0x05,0x10,0x31};
		IntArray2ByteArray(tmp, 0, capk14.ExpDate, 0, tmp.length);
		tmp = new int[]{0x76,0x16,0xE9,0xAC,0x8B,0xE0,0x14,0xAF,0x88,0xCA,0x11,0xA8,0xFB,0x17,0x96,0x7B,
                0x73,0x94,0x03,0x0E};
		IntArray2ByteArray(tmp, 0, capk14.CheckSum, 0, tmp.length);
		
		
		//init capk15   CUP 1024 bits Test Key 11
		capk15 = new EMV_CAPK();
		tmp = new int[]{0xD1,0x56,0x00,0x00,0x01};
		IntArray2ByteArray(tmp, 0, capk15.RID, 0, tmp.length);
		capk15.KeyID = 0x1e;
		capk15.HashInd = 0x01;
		capk15.ArithInd = 0x01;
		capk15.ModulLen = (byte) 128;
		tmp = new int[]{0x9F,0x90,0x1D,0x24,0xEB,0xE2,0x1B,0xB0,0x93,0xBB,0x93,0x31,0x93,0xB5,0x67,0x6B,
                0x3A,0xE0,0x9A,0x6E,0x98,0x15,0x41,0x62,0x5A,0xF2,0x92,0x16,0x9D,0x65,0x8C,0xE1,
                0xDC,0x9D,0x39,0xAD,0xDD,0xC8,0x9D,0x6E,0x2B,0xCE,0x69,0x97,0xB6,0xC1,0x2C,0xDF,
                0x67,0x89,0xA5,0x9B,0xA0,0xF8,0xF6,0x4F,0x94,0x22,0x68,0xC0,0xB4,0x26,0xC0,0x53,
                0x53,0x4A,0x7E,0xFE,0x68,0x45,0x4D,0x46,0x7E,0xBB,0x88,0x29,0xE9,0x29,0x38,0x07,
                0x52,0x0F,0x66,0xD0,0x7D,0xD5,0xDF,0xB5,0xFE,0x7C,0x74,0x6D,0xA2,0x9D,0x32,0xCA,
                0x3B,0xAF,0xDD,0x07,0xB3,0x0E,0x53,0xFE,0x5B,0xA3,0x04,0xDC,0xCB,0xA3,0x87,0xA1,
                0x6F,0x89,0xEF,0x76,0x1E,0xBE,0x22,0x4E,0xEE,0x5F,0xDE,0x3A,0x8F,0x26,0x04,0xFB};
		IntArray2ByteArray(tmp, 0, capk15.Modul, 0, tmp.length);
		capk15.ExpLen = 3;
		tmp = new int[]{0x01,0x00,0x01};
		IntArray2ByteArray(tmp, 0, capk15.Exp, 0, tmp.length);
		tmp = new int[]{0x05,0x10,0x31};
		IntArray2ByteArray(tmp, 0, capk15.ExpDate, 0, tmp.length);
		tmp = new int[]{0x76,0x16,0xE9,0xAC,0x8B,0xE0,0x14,0xAF,0x88,0xCA,0x11,0xA8,0xFB,0x17,0x96,0x7B,
                0x73,0x94,0x03,0x0E};
		IntArray2ByteArray(tmp, 0, capk15.CheckSum, 0, tmp.length);
		
		

		//init capk16   CUP 1024 bits Test Key 12
		capk16 = new EMV_CAPK();
		tmp = new int[]{0xD1,0x56,0x00,0x00,0x01};
		IntArray2ByteArray(tmp, 0, capk16.RID, 0, tmp.length);
		capk16.KeyID = 0x21;
		capk16.HashInd = 0x01;
		capk16.ArithInd = 0x01;
		capk16.ModulLen = (byte) 128;
		tmp = new int[]{0xE3,0x07,0xF4,0x59,0x42,0x3B,0xA5,0xC0,0x26,0xFE,0x6D,0xF2,0x66,0x81,0xC1,0x3A,
                0xC2,0x6C,0x5A,0xF1,0xB5,0x0B,0x1D,0x9C,0x7B,0xD1,0x87,0x22,0x3A,0x73,0x38,0xB9,
                0xFD,0x29,0xFC,0x3D,0x65,0x13,0x98,0x8B,0xF7,0x67,0xE6,0xE9,0xE3,0x66,0xC2,0x8F,
                0x9A,0x62,0xBE,0x04,0x11,0x88,0xBF,0x7F,0x46,0xD8,0x47,0xBA,0x4B,0xBB,0x4D,0x38,
                0xAE,0xD6,0x2E,0x6E,0x33,0x96,0xC8,0x2E,0xD1,0x32,0x9C,0x1F,0x23,0x1A,0x57,0xD7,
                0x17,0x9A,0x07,0xC8,0x39,0x2B,0xB7,0xED,0xE6,0xC8,0x98,0xE7,0x92,0x58,0x93,0xCD,
                0xE5,0x3D,0xBE,0xDD,0x25,0xDE,0x43,0x1D,0x42,0x2D,0xAA,0xF5,0xD7,0xE1,0x9B,0x9B,
                0xB9,0xD1,0xEF,0x70,0xC4,0x3A,0x7B,0x77,0x71,0x14,0x6F,0x65,0x18,0x88,0xE3,0x41};
		IntArray2ByteArray(tmp, 0, capk16.Modul, 0, tmp.length);
		capk16.ExpLen = 3;
		tmp = new int[]{0x01,0x00,0x01};
		IntArray2ByteArray(tmp, 0, capk16.Exp, 0, tmp.length);
		tmp = new int[]{0x05,0x10,0x31};
		IntArray2ByteArray(tmp, 0, capk16.ExpDate, 0, tmp.length);
		tmp = new int[]{0x76,0x16,0xE9,0xAC,0x8B,0xE0,0x14,0xAF,0x88,0xCA,0x11,0xA8,0xFB,0x17,0x96,0x7B,
                0x73,0x94,0x03,0x0E};
		IntArray2ByteArray(tmp, 0, capk16.CheckSum, 0, tmp.length);
		
		
		//init capk17   CUP 1024 bits Test Key 13
		capk17 = new EMV_CAPK();
		tmp = new int[]{0xD1,0x56,0x00,0x00,0x01};
		IntArray2ByteArray(tmp, 0, capk17.RID, 0, tmp.length);
		capk17.KeyID = 0x24;
		capk17.HashInd = 0x01;
		capk17.ArithInd = 0x01;
		capk17.ModulLen = (byte) 128;
		tmp = new int[]{0xBD,0xE3,0x0C,0xAC,0xCE,0xF1,0xB8,0xCC,0xCF,0xE6,0x55,0x44,0xC2,0x0D,0xA2,0x8A,
                0xA4,0x2F,0x61,0xEB,0xAB,0x51,0x5B,0x69,0x64,0xFB,0x6A,0xFF,0x97,0x9A,0x11,0x5A,
                0x13,0x70,0xBA,0xD4,0x0A,0x3D,0x32,0xEC,0x37,0x63,0xB7,0x62,0xD2,0xD2,0xD6,0xED,
                0x52,0xB5,0xBC,0xD6,0x0A,0xDA,0xCB,0x9D,0x8F,0x26,0x62,0x11,0xE1,0x4B,0xED,0xD7,
                0x27,0xCE,0xD3,0x15,0xF5,0xF4,0x6B,0x95,0x15,0x4D,0xB9,0xD2,0x7C,0x21,0xC4,0x22,
                0x27,0x80,0x53,0x32,0xE8,0xB9,0xA8,0x14,0x87,0xF7,0x8B,0xB6,0xE7,0xC0,0x57,0x99,
                0x0C,0x53,0x52,0xD3,0x24,0x89,0xC6,0x89,0x5A,0x04,0x18,0x81,0x94,0x2F,0xFD,0xA2,
                0x22,0xD6,0x2C,0x07,0x86,0x8E,0x21,0x0C,0x81,0x8C,0xFF,0x90,0x31,0xB9,0x10,0x27};
		IntArray2ByteArray(tmp, 0, capk17.Modul, 0, tmp.length);
		capk17.ExpLen = 3;
		tmp = new int[]{0x01,0x00,0x01};
		IntArray2ByteArray(tmp, 0, capk17.Exp, 0, tmp.length);
		tmp = new int[]{0x05,0x10,0x31};
		IntArray2ByteArray(tmp, 0, capk17.ExpDate, 0, tmp.length);
		tmp = new int[]{0x76,0x16,0xE9,0xAC,0x8B,0xE0,0x14,0xAF,0x88,0xCA,0x11,0xA8,0xFB,0x17,0x96,0x7B,
                0x73,0x94,0x03,0x0E};
		IntArray2ByteArray(tmp, 0, capk17.CheckSum, 0, tmp.length);
	
		
		//init capk18   CUP 1024 bits Test Key 14
		capk18 = new EMV_CAPK();
		tmp = new int[]{0xD1,0x56,0x00,0x00,0x01};
		IntArray2ByteArray(tmp, 0, capk18.RID, 0, tmp.length);
		capk18.KeyID = 0x27;
		capk18.HashInd = 0x01;
		capk18.ArithInd = 0x01;
		capk18.ModulLen = (byte) 128;
		tmp = new int[]{0xC9,0xAD,0x14,0xFF,0xB1,0xE5,0xCC,0x81,0x71,0xD5,0xD1,0xD9,0xD6,0x7A,0x5A,0xDC,
                0x6A,0x6E,0x95,0x20,0xC7,0xB2,0xB4,0xE1,0x8B,0x5B,0xE6,0x2B,0xF9,0xCB,0xCD,0xC7,
                0xD7,0x42,0x29,0xB4,0xC2,0xB3,0x67,0xDA,0x2D,0x0C,0xDF,0x09,0xF1,0x51,0x08,0xB1,
                0xF7,0xA0,0x52,0x05,0x9A,0x9D,0xC7,0x30,0x60,0x50,0x99,0xC6,0xAF,0x21,0xB7,0xC5,
                0x20,0x37,0xCA,0xC0,0xF9,0xDF,0xA6,0x4C,0x3D,0x7C,0x3A,0x79,0x27,0xD7,0x91,0x6E,
                0x40,0x04,0x7A,0xB9,0xA1,0x65,0x09,0xA8,0x95,0x93,0x18,0xBC,0xBC,0x9D,0x6E,0x43,
                0x0A,0x04,0xE0,0xB4,0xA6,0xA8,0x5F,0x64,0x48,0x98,0x9D,0xB1,0x1D,0x6A,0xF9,0x78,
                0xE1,0xD2,0xFB,0xAF,0xA7,0xB5,0xE4,0x2C,0xC8,0x3A,0xB8,0x33,0x78,0xF8,0x48,0x9F};
		IntArray2ByteArray(tmp, 0, capk18.Modul, 0, tmp.length);
		capk18.ExpLen = 3;
		tmp = new int[]{0x01,0x00,0x01};
		IntArray2ByteArray(tmp, 0, capk18.Exp, 0, tmp.length);
		tmp = new int[]{0x05,0x10,0x31};
		IntArray2ByteArray(tmp, 0, capk18.ExpDate, 0, tmp.length);
		tmp = new int[]{0x76,0x16,0xE9,0xAC,0x8B,0xE0,0x14,0xAF,0x88,0xCA,0x11,0xA8,0xFB,0x17,0x96,0x7B,
                0x73,0x94,0x03,0x0E};
		IntArray2ByteArray(tmp, 0, capk18.CheckSum, 0, tmp.length);
		
		
		
		//init capk19   CUP 1024 bits Test Key 15
		capk19 = new EMV_CAPK();
		tmp = new int[]{0xD1,0x56,0x00,0x00,0x01};
		IntArray2ByteArray(tmp, 0, capk19.RID, 0, tmp.length);
		capk19.KeyID = 0x2A;
		capk19.HashInd = 0x01;
		capk19.ArithInd = 0x01;
		capk19.ModulLen = (byte) 128;
		tmp = new int[]{0xD7,0x1F,0x4C,0x69,0xA0,0x3F,0x7A,0x77,0x9D,0x7E,0x1A,0x09,0x9B,0xE4,0x50,0xAE,
                0x3C,0x40,0x3E,0xE3,0xD0,0x56,0x47,0xF8,0xBE,0xAE,0x23,0xDF,0xBE,0xB8,0xB0,0xD6,
                0xB6,0x95,0x62,0x9A,0x3A,0xB8,0xAB,0x18,0xC9,0x2C,0xE8,0x19,0x56,0xD2,0xF0,0x07,
                0x4A,0xF2,0x17,0xCA,0x76,0xCF,0xC6,0xE3,0xE6,0x13,0xA6,0xF8,0xB1,0x44,0xD4,0xC0,
                0x61,0xC3,0x67,0xC2,0x44,0x90,0x6F,0x84,0xE8,0xEA,0xC7,0xE6,0x55,0x09,0xB2,0xEF,
                0xBF,0x7A,0x48,0xA8,0xCB,0xEF,0xA3,0x8B,0x37,0xA9,0x12,0x79,0xC3,0xBD,0x27,0xF4,
                0x03,0xFA,0xBE,0xA6,0x5B,0x62,0x5F,0xEA,0xD6,0x56,0x05,0x99,0x1C,0x2E,0x6A,0x1F,
                0x65,0x95,0xAC,0xA2,0x7F,0x78,0x15,0xAB,0x7D,0x19,0x86,0xE9,0x65,0xEE,0xA7,0x5D};
		IntArray2ByteArray(tmp, 0, capk19.Modul, 0, tmp.length);
		capk19.ExpLen = 3;
		tmp = new int[]{0x01,0x00,0x01};
		IntArray2ByteArray(tmp, 0, capk19.Exp, 0, tmp.length);
		tmp = new int[]{0x05,0x10,0x31};
		IntArray2ByteArray(tmp, 0, capk19.ExpDate, 0, tmp.length);
		tmp = new int[]{0x76,0x16,0xE9,0xAC,0x8B,0xE0,0x14,0xAF,0x88,0xCA,0x11,0xA8,0xFB,0x17,0x96,0x7B,
                0x73,0x94,0x03,0x0E};
		IntArray2ByteArray(tmp, 0, capk19.CheckSum, 0, tmp.length);
		
		
		//init capk20   CUP 1024 bits Test Key 16
		capk20 = new EMV_CAPK();
		tmp = new int[]{0xD1,0x56,0x00,0x00,0x01};
		IntArray2ByteArray(tmp, 0, capk20.RID, 0, tmp.length);
		capk20.KeyID = 0x2D;
		capk20.HashInd = 0x01;
		capk20.ArithInd = 0x01;
		capk20.ModulLen = (byte) 144;
		tmp = new int[]{0xCB,0x3F,0x75,0x89,0x3A,0xF6,0x3E,0xDE,0x19,0xF0,0x9E,0x67,0x4D,0xEC,0xBC,0x51,
                0x7B,0x3E,0x51,0x68,0x40,0x65,0xD3,0xD4,0x1C,0xC4,0x65,0xEC,0xF2,0xFE,0xDF,0xBF,
                0x6A,0xFD,0x7F,0x10,0x5F,0xB0,0x99,0x3A,0x21,0x04,0x95,0x92,0xE8,0xDE,0xFB,0xE6,
                0x66,0x6B,0x8C,0x88,0xDC,0x79,0xCC,0x93,0xA6,0xA5,0x5B,0x09,0x6D,0xD7,0x73,0xBE,
                0x16,0xDE,0x85,0x07,0x71,0xAF,0xB3,0x0F,0xB0,0xF0,0x9D,0x02,0x64,0xAA,0x91,0xE2,
                0x4D,0x46,0x70,0x04,0x87,0xB8,0x84,0x85,0x9B,0x9D,0x36,0xC9,0x9C,0x66,0xC3,0x63,
                0x4F,0xD5,0x51,0xCE,0xCC,0xAD,0xAD,0x33,0x54,0x63,0xCF,0x4F,0xD1,0x92,0x63,0xAC,
                0x29,0x50,0x80,0x3D,0x57,0x91,0xA6,0xD7,0x06,0x86,0x68,0x2E,0x90,0xB8,0xFB,0x26,
                0x25,0x12,0x9C,0xC7,0x32,0x8B,0xC8,0x53,0x25,0x24,0xEE,0x94,0x24,0x40,0xCF,0x3F};
		IntArray2ByteArray(tmp, 0, capk20.Modul, 0, tmp.length);
		capk20.ExpLen = 3;
		tmp = new int[]{0x01,0x00,0x01};
		IntArray2ByteArray(tmp, 0, capk20.Exp, 0, tmp.length);
		tmp = new int[]{0x05,0x10,0x31};
		IntArray2ByteArray(tmp, 0, capk20.ExpDate, 0, tmp.length);
		tmp = new int[]{0x76,0x16,0xE9,0xAC,0x8B,0xE0,0x14,0xAF,0x88,0xCA,0x11,0xA8,0xFB,0x17,0x96,0x7B,
                0x73,0x94,0x03,0x0E};
		IntArray2ByteArray(tmp, 0, capk20.CheckSum, 0, tmp.length);
		
		gCapklist = new EMV_CAPK[MAX_CAPK_NUM];
		gCapklist[0] = new EMV_CAPK();
		CopyCAPK(capk01, gCapklist[0]);
		gCapklist[1] = new EMV_CAPK();
		CopyCAPK(capk02, gCapklist[1]);
		gCapklist[2] = new EMV_CAPK();
		CopyCAPK(capk03, gCapklist[2]);
		gCapklist[3] = new EMV_CAPK();
		CopyCAPK(capk04, gCapklist[3]);
		gCapklist[4] = new EMV_CAPK();
		CopyCAPK(capk05, gCapklist[4]);
		gCapklist[5] = new EMV_CAPK();
		CopyCAPK(capk06, gCapklist[5]);
		gCapklist[6] = new EMV_CAPK();
		CopyCAPK(capk07, gCapklist[6]);
		gCapklist[7] = new EMV_CAPK();
		CopyCAPK(capk08, gCapklist[7]);
		gCapklist[8] = new EMV_CAPK();
		CopyCAPK(capk09, gCapklist[8]);
		gCapklist[9] = new EMV_CAPK();
		CopyCAPK(capk10, gCapklist[9]);
		gCapklist[10] = new EMV_CAPK();
		CopyCAPK(capk11, gCapklist[10]);
		gCapklist[11] = new EMV_CAPK();
		CopyCAPK(capk12, gCapklist[11]);
		gCapklist[12] = new EMV_CAPK();
		CopyCAPK(capk13, gCapklist[12]);
		gCapklist[13] = new EMV_CAPK();
		CopyCAPK(capk14, gCapklist[13]);
		gCapklist[14] = new EMV_CAPK();
		CopyCAPK(capk15, gCapklist[14]);
		gCapklist[15] = new EMV_CAPK();
		CopyCAPK(capk16, gCapklist[15]);
		gCapklist[16] = new EMV_CAPK();
		CopyCAPK(capk17, gCapklist[16]);
		gCapklist[17] = new EMV_CAPK();
		CopyCAPK(capk18, gCapklist[17]);
		gCapklist[18] = new EMV_CAPK();
		CopyCAPK(capk19, gCapklist[18]);
		gCapklist[19] = new EMV_CAPK();
		CopyCAPK(capk20, gCapklist[19]);
	}
	
	private int CopyCAPK(EMV_CAPK stCAPK1, EMV_CAPK stCAPK2)
	{
		int len = 0;
		
		System.arraycopy(stCAPK1.RID, 0, stCAPK2.RID, 0, stCAPK1.RID.length);
		len += stCAPK1.RID.length;
		stCAPK2.KeyID = stCAPK1.KeyID;
		len++;
		stCAPK2.HashInd = stCAPK1.HashInd;
		len++;
		stCAPK2.ArithInd = stCAPK1.ArithInd;
		len++;
		stCAPK2.ModulLen = stCAPK1.ModulLen;
		len++;
		System.arraycopy(stCAPK1.Modul, 0, stCAPK2.Modul, 0, stCAPK1.Modul.length);
		len += stCAPK1.Modul.length;
		stCAPK2.ExpLen = stCAPK1.ExpLen;
		len++;
		System.arraycopy(stCAPK1.Exp, 0, stCAPK2.Exp, 0, stCAPK1.Exp.length);
		len += stCAPK1.Exp.length;
		System.arraycopy(stCAPK1.ExpDate, 0, stCAPK2.ExpDate, 0, stCAPK1.ExpDate.length);
		len += stCAPK1.ExpDate.length;
		System.arraycopy(stCAPK1.CheckSum, 0, stCAPK2.CheckSum, 0, stCAPK1.CheckSum.length);
		len += stCAPK1.CheckSum.length;
		
		return len;
	}
	
	private void InitApp()
	{
		try{
		ui.scrCls();
		ui.scrShowText("%F1Testing EMV...");
		
		EMV_APPLIST app2 = new EMV_APPLIST();
		//byte[] appName2 = new String("discover").getBytes();
		byte[] appName2 = new String("flash").getBytes();
		System.arraycopy(appName2, 0, app2.AppName, 0, appName2.length);
		byte[] aid2 = new byte[] { (byte)0xA0, 0x00, 0x00, 0x03, 0x33,0x00,0x00};	//pboc rid
		//byte[] aid = new byte[] {(byte)0xA0, 0x00, 0x00, 0x02, (byte)0x77};		//flash
		//byte[] aid = new byte[] {(byte)0xA0, 0x00, 0x00, 0x03, (byte)0x24};		//discover
		System.arraycopy(aid2, 0, app2.AID, 0, aid2.length);
		app2.AidLen = (byte)0x07;
		app2.FloorLimit = 100000;
		app2.Threshold = 50000;
		
		byte[] actDenial2 = new byte[] {0x00, 0x10, 0x00, 0x00, 0x00};
		System.arraycopy(actDenial2, 0, app2.TACDenial, 0, actDenial2.length);
		byte[] actOnline2 = new byte[] {(byte)0xD8, 0x40, 0x04, (byte)0xF8, 0x00};
		System.arraycopy(actOnline2, 0, app2.TACOnline, 0, actOnline2.length);
		byte[] actDefault2 = new byte[] {(byte)0xD8, 0x40, 0x00, (byte)0xA8, 0x00};
		System.arraycopy(actDefault2, 0, app2.TACDefault, 0, actDefault2.length);
		
		byte[] aquirerId2 = new byte[] {(byte)0x01, 0x02, 0x03, (byte)0x04, 0x05, 0x06};
		System.arraycopy(aquirerId2, 0, app2.AcquierId, 0, aquirerId2.length);
		
		byte[] dDol2 = new byte[] {(byte)0x03, (byte)0x9F, 0x37, (byte)0x04};
		System.arraycopy(dDol2, 0, app2.dDOL, 0, dDol2.length);
		
		byte[] tDol2 = new byte[] {(byte)0x0F, (byte)0x9F, (byte)0x02, (byte)0x06, (byte)0x5F, (byte)0x2A, (byte)0x02, (byte)0x9A,
				(byte)0x03, (byte)0x9C, (byte)0x01, (byte)0x95, (byte)0x05, (byte)0x9F, (byte)0x37, (byte)0x04};
		System.arraycopy(tDol2, 0, app2.dDOL, 0, tDol2.length);
		
		// ******adddd*********
		 		EMV_APPLIST app1 = new EMV_APPLIST();
		//byte[] appName = new String("discover").getBytes();
		byte[] appName1 = new String("flash").getBytes();
		System.arraycopy(appName1, 0, app1.AppName, 0, appName1.length);
		byte[] aid1 = new byte[] { (byte)0xA0, 0x00, 0x00, 0x00, 0x03 ,0x10,0x10};	
		//byte[] aid = new byte[] {(byte)0xA0, 0x00, 0x00, 0x02, (byte)0x77};		//flash
		//byte[] aid = new byte[] {(byte)0xA0, 0x00, 0x00, 0x03, (byte)0x24};		//discover
		System.arraycopy(aid1, 0, app1.AID, 0, aid1.length);
		app1.AidLen = (byte)0x07;
		app1.FloorLimit = 100000;
		app1.Threshold = 50000;
		
		byte[] actDenial1 = new byte[] {0x00, 0x10, 0x00, 0x00, 0x00};
		System.arraycopy(actDenial1, 0, app1.TACDenial, 0, actDenial1.length);
		byte[] actOnline1 = new byte[] {(byte)0xD8, 0x40, 0x04, (byte)0xF8, 0x00};
		System.arraycopy(actOnline1, 0, app1.TACOnline, 0, actOnline1.length);
		byte[] actDefault1 = new byte[] {(byte)0xD8, 0x40, 0x00, (byte)0xA8, 0x00};
		System.arraycopy(actDefault1, 0, app1.TACDefault, 0, actDefault1.length);
		
		byte[] aquirerId1 = new byte[] {(byte)0x00, 0x00, 0x00, (byte)0x21, 0x34, 0x56};
		System.arraycopy(aquirerId1, 0, app1.AcquierId, 0, aquirerId1.length);
		
		byte[] dDol1 = new byte[] {(byte)0x03, (byte)0x9F, 0x37, (byte)0x04};
		System.arraycopy(dDol1, 0, app1.dDOL, 0, dDol1.length);
		
		byte[] tDol1 = new byte[] {(byte)0x0F, (byte)0x9F, (byte)0x02, (byte)0x06, (byte)0x5F, (byte)0x2A, (byte)0x02, (byte)0x9A,
				(byte)0x03, (byte)0x9C, (byte)0x01, (byte)0x95, (byte)0x05, (byte)0x9F, (byte)0x37, (byte)0x04};
		System.arraycopy(tDol1, 0, app1.dDOL, 0, tDol1.length);
		
				EMV_APPLIST app = new EMV_APPLIST();
		//byte[] appName = new String("discover").getBytes();
		byte[] appName = new String("flash").getBytes();
		System.arraycopy(appName, 0, app.AppName, 0, appName.length);
		byte[] aid = new byte[] { (byte)0xA0, 0x00, 0x00, 0x00, 0x03 ,0x20,0x10};	//pboc rid
		//byte[] aid = new byte[] {(byte)0xA0, 0x00, 0x00, 0x02, (byte)0x77};		//flash
		//byte[] aid = new byte[] {(byte)0xA0, 0x00, 0x00, 0x03, (byte)0x24};		//discover
		System.arraycopy(aid, 0, app.AID, 0, aid.length);
		app.AidLen = (byte)0x07;
		app.FloorLimit = 100000;
		app.Threshold = 50000;
		
		byte[] actDenial = new byte[] {0x00, 0x10, 0x00, 0x00, 0x00};
		System.arraycopy(actDenial, 0, app.TACDenial, 0, actDenial.length);
		byte[] actOnline = new byte[] {(byte)0xD8, 0x40, 0x04, (byte)0xF8, 0x00};
		System.arraycopy(actOnline, 0, app.TACOnline, 0, actOnline.length);
		byte[] actDefault = new byte[] {(byte)0xD8, 0x40, 0x00, (byte)0xA8, 0x00};
		System.arraycopy(actDefault, 0, app.TACDefault, 0, actDefault.length);
		
		byte[] aquirerId = new byte[] {0x00, 0x00, 0x00, 0x12, 0x34, 0x56};
		System.arraycopy(aquirerId, 0, app.AcquierId, 0, aquirerId.length);
		
		byte[] dDol = new byte[] {0x03, (byte)0x9F, 0x37, 0x04};
		System.arraycopy(dDol, 0, app.dDOL, 0, dDol.length);
		
		byte[] tDol = new byte[] {(byte)0x0F, (byte)0x9F, 0x02, 0x06, (byte)0x5F, (byte)0x2A, 0x02, (byte)0x9A,
				0x03, (byte)0x9C, 0x01, (byte)0x95, 0x05, (byte)0x9F, 0x37, 0x04};
		System.arraycopy(tDol, 0, app.dDOL, 0, tDol.length);
		
				EMV_APPLIST app3 = new EMV_APPLIST();
		//byte[] appName = new String("discover").getBytes();
		byte[] appName3 = new String("flash").getBytes();
		System.arraycopy(appName3, 0, app3.AppName, 0, appName3.length);
		byte[] aid3 = new byte[] { (byte)0xA0, 0x00, 0x00, 0x00, 0x04 };	//pboc rid
		//byte[] aid = new byte[] {(byte)0xA0, 0x00, 0x00, 0x02, (byte)0x77};		//flash
		//byte[] aid = new byte[] {(byte)0xA0, 0x00, 0x00, 0x03, (byte)0x24};		//discover
		System.arraycopy(aid3, 0, app3.AID, 0, aid3.length);
		app3.AidLen = (byte)0x05;
		app3.FloorLimit = 100000;
		app3.Threshold = 50000;
		
		byte[] actDenial3 = new byte[] {0x04, 0x00, 0x00, 0x00, 0x00};
		System.arraycopy(actDenial3, 0, app3.TACDenial, 0, actDenial3.length);
		byte[] actOnline3 = new byte[] {(byte)0xF8, 0x50, (byte)0xAC, (byte)0xF8, 0x00};
		System.arraycopy(actOnline3, 0, app3.TACOnline, 0, actOnline3.length);
		byte[] actDefault3 = new byte[] {(byte)0xFC, 0x50, (byte)0xAC, (byte)0xA0, 0x00};
		System.arraycopy(actDefault3, 0, app3.TACDefault, 0, actDefault3.length);
		
		byte[] aquirerId3 = new byte[] {(byte)0x00, 0x00, 0x00, (byte)0x12, 0x34, 0x56};
		System.arraycopy(aquirerId3, 0, app.AcquierId, 0, aquirerId3.length);
		
		byte[] dDol3 = new byte[] {(byte)0x03, (byte)0x9F, 0x37, (byte)0x04};
		System.arraycopy(dDol3, 0, app.dDOL, 0, dDol3.length);
		
		byte[] tDol3 = new byte[] {(byte)0x0F, (byte)0x9F, (byte)0x02, (byte)0x06, (byte)0x5F, (byte)0x2A, (byte)0x02, (byte)0x9A,
				(byte)0x03, (byte)0x9C, (byte)0x01, (byte)0x95, (byte)0x05, (byte)0x9F, (byte)0x37, (byte)0x04};
		System.arraycopy(tDol3, 0, app.dDOL, 0, tDol3.length);
		
		
	
		
	
		
		EMV_PARAM param = emv.getParameter();
		//set merchant id
		System.arraycopy(new String("111111111111111").getBytes(), 0, param.MerchId, 0, 15);
		//set term id
		System.arraycopy(new String("12345678").getBytes(), 0, param.TermId, 0, 8);
		//set country code / currency code
		byte[] countryCode = new byte[] { 0x01, 0x24 };  
		byte[] currencyCode = new byte[] { 0x01, 0x24 };
		System.arraycopy(countryCode, 0, param.CountryCode, 0, 2);
		System.arraycopy(currencyCode, 0, param.TransCurrCode, 0, 2);
		
		byte[] termCap = new byte[] {(byte)0xe0, (byte)0xF8, (byte)0xE8}; 
		System.arraycopy(termCap, 0, param.Capability, 0, 3);
		emv.setParameter(param);
		
		//emv.addCAPK(capk);
	
		emv.addApp(app);	
		emv.addApp(app1);
		emv.addApp(app2);
//			emv.addApp(app3);
		

		EMV_APPLIST app4 = new EMV_APPLIST();
		EMV_APPLIST app5 = new EMV_APPLIST();
		EMV_APPLIST app6 = new EMV_APPLIST();
		EMV_APPLIST app7 = new EMV_APPLIST();
		EMV_APPLIST app8 = new EMV_APPLIST();
		EMV_APPLIST app9 = new EMV_APPLIST();
			app4 = emv.getApp(0);
			if(app4 != null )
			{
				emv.addApp(app4);
				ui.scrCls();
			    ui.scrShowText("%s" + Utils.byte2HexStr(app4.AID, 0, 7));
			    SystemClock.sleep(1000);
			}
			app5 = emv.getApp(1);
			if(app5 != null )
			{
				emv.addApp(app5);
				ui.scrCls();
			    ui.scrShowText("%s" + Utils.byte2HexStr(app5.AID, 0, 7));
			    SystemClock.sleep(1000);
			}
			app6 = emv.getApp(2);
			if(app6 != null )
			{
				emv.addApp(app6);
				ui.scrCls();
			    ui.scrShowText("%s" + Utils.byte2HexStr(app6.AID, 0, 7));
			    SystemClock.sleep(1000);
			}
			app7 = emv.getApp(3);
			if(app7 != null )
			{
				emv.addApp(app7);
				ui.scrCls();
			    ui.scrShowText("%s" + Utils.byte2HexStr(app7.AID, 0, 7));
			    SystemClock.sleep(1000);
			}
			app8 = emv.getApp(4);
			if(app8 != null )
			{
				emv.addApp(app8);
				ui.scrCls();
			    ui.scrShowText("%s" + Utils.byte2HexStr(app8.AID, 0, 7));
			    SystemClock.sleep(1000);
			}
			app9 = emv.getApp(5);
			if(app9 != null )
			{
				emv.addApp(app9);
				ui.scrCls();
			    ui.scrShowText("%s" + Utils.byte2HexStr(app9.AID, 0, 7));
			    SystemClock.sleep(1000);
			}
	
		
		//detect card
		while (!icc.iccDetect(IccManager.ICC_SLOT_BIT_SLOT0)) {
			ui.scrCls();
			ui.scrShowText("%F1Insert card...");
			SystemClock.sleep(1000);
		}
		
	
			
		ui.scrCls();
		ui.scrShowText("%F1app sel");
		
		int ret;
		if ((ret = emv.appSelect(0, 0)) != EmvManager.EMV_OK) {
			Log.w(TAG, "appselect ret: " + ret);

			Bundle bundle = new Bundle();
			bundle.putString("status", String.format("app select error : %d", ret));
			Message msg = handler.obtainMessage();
			msg.what = MSG_UPDATE_STATUS;
			msg.setData(bundle);
			handler.sendMessage(msg);

			return;
		}

		ui.scrCls();
		ui.scrShowText("%F1read app data");
		emv.readAppData();

		ui.scrCls();
		ui.scrShowText("%F1card auth");
		if ((ret = emv.cardAuth()) !=  EmvManager.EMV_OK) {
			Log.w(TAG, "cardAuth ret: " + ret);
			
			Bundle bundle = new Bundle();
			bundle.putString("status", String.format("card auth error : %d", ret));
			Message msg = handler.obtainMessage();
			msg.what = MSG_UPDATE_STATUS;
			msg.setData(bundle);
			handler.sendMessage(msg);

			return;					
		}
		
		ui.scrCls();
		ui.scrShowText("%F1Proc trans...");				
		emv.setPCIModeParam(offlinePinInputTimeout, "4");
		int transResult = emv.procTrans();
		
		Log.i(TAG, "emv trans complete with result " + transResult);

		ui.scrCls();
		ui.scrShowText("%F1EMV test end");				

		Bundle bundle = new Bundle();
		bundle.putString("status", "test end");
		Message msg = handler.obtainMessage();
		msg.what = MSG_UPDATE_STATUS;
		msg.setData(bundle);
		handler.sendMessage(msg);
		
	} catch(Exception exception){
		exception.printStackTrace();
		Bundle bundle = new Bundle();
		bundle.putString("status", "Exception: " + exception.toString());
		Message msg = handler.obtainMessage();
		msg.what = MSG_UPDATE_STATUS;
		msg.setData(bundle);
		handler.sendMessage(msg);
	} finally {
		//progressDialog.dismiss();
	}
}
	
	
	private void TestDownloadCAPKFUN1()
	{
		String record = "";
		int step = 0;
		try{
			InitCapk();
			step++;

			ui.scrCls();
			ui.scrShowText("%P0505DownLoad Capk Begin");
			SystemClock.sleep(1000);
			step++;
			
			for (int i = 0; i < 20; i++)
			{
				clss.integrate.downloadCAPK(gCapklist[i]);
				step++;
				
				ui.scrCls();
				ui.scrShowText("%P0505ClssDownLoadCAPK = " + i);
				ui.scrShowText("%P0525RID: " + Utils.byte2HexStr(gCapklist[i].RID, 0, gCapklist[i].RID.length));
				record += "ClssDownLoadCAPK = " + i + "\n";
				record += "RID: " + Utils.byte2HexStr(gCapklist[i].RID, 0, gCapklist[i].RID.length) + "\n";
				SystemClock.sleep(1000);
				step++;
				
				if (null == gCapklist[i].RID)
					break;
			}

			ui.scrCls();
			ui.scrShowText("%P0505DownLoad Capk Finish");
			step++;
			kbd.kbGetkey(3000);
			step++;
			
			record += "Base test end"; 

			Bundle bundle = new Bundle();
			bundle.putString("result", record);
			Message msg = handler.obtainMessage();
			msg.what = 1;
			msg.setData(bundle);
			handler.sendMessage(msg);
		}catch(Exception exception){
			exception.printStackTrace();
			Bundle bundle = new Bundle();
			bundle.putString("result", record + "Exception: " + exception.toString() + " on step: " + step);
			Message msg = handler.obtainMessage();
			msg.what = 2;
			msg.setData(bundle);
			handler.sendMessage(msg);
		} finally {
			progressDialog.dismiss();
		}
	}

	private void TestDownloadAPPFUN1()
	{
			InitApp();
	}
}
